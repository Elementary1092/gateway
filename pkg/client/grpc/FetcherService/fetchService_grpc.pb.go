// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: fetchService.proto

package fetch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FetchServiceClient is the client API for FetchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchServiceClient interface {
	StartFetching(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchStatus, error)
	GetStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*FetchStatus, error)
	GetError(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type fetchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchServiceClient(cc grpc.ClientConnInterface) FetchServiceClient {
	return &fetchServiceClient{cc}
}

func (c *fetchServiceClient) StartFetching(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*FetchStatus, error) {
	out := new(FetchStatus)
	err := c.cc.Invoke(ctx, "/services.FetchService/StartFetching", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetStatus(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*FetchStatus, error) {
	out := new(FetchStatus)
	err := c.cc.Invoke(ctx, "/services.FetchService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchServiceClient) GetError(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/services.FetchService/GetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServiceServer is the server API for FetchService service.
// All implementations must embed UnimplementedFetchServiceServer
// for forward compatibility
type FetchServiceServer interface {
	StartFetching(context.Context, *FetchRequest) (*FetchStatus, error)
	GetStatus(context.Context, *EmptyMessage) (*FetchStatus, error)
	GetError(context.Context, *EmptyMessage) (*EmptyMessage, error)
	mustEmbedUnimplementedFetchServiceServer()
}

// UnimplementedFetchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFetchServiceServer struct {
}

func (UnimplementedFetchServiceServer) StartFetching(context.Context, *FetchRequest) (*FetchStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFetching not implemented")
}
func (UnimplementedFetchServiceServer) GetStatus(context.Context, *EmptyMessage) (*FetchStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedFetchServiceServer) GetError(context.Context, *EmptyMessage) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetError not implemented")
}
func (UnimplementedFetchServiceServer) mustEmbedUnimplementedFetchServiceServer() {}

// UnsafeFetchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServiceServer will
// result in compilation errors.
type UnsafeFetchServiceServer interface {
	mustEmbedUnimplementedFetchServiceServer()
}

func RegisterFetchServiceServer(s grpc.ServiceRegistrar, srv FetchServiceServer) {
	s.RegisterService(&FetchService_ServiceDesc, srv)
}

func _FetchService_StartFetching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).StartFetching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FetchService/StartFetching",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).StartFetching(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FetchService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetStatus(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _FetchService_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServiceServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.FetchService/GetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServiceServer).GetError(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchService_ServiceDesc is the grpc.ServiceDesc for FetchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.FetchService",
	HandlerType: (*FetchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFetching",
			Handler:    _FetchService_StartFetching_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _FetchService_GetStatus_Handler,
		},
		{
			MethodName: "GetError",
			Handler:    _FetchService_GetError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fetchService.proto",
}
